分配80个字节的栈空间
%r13 = %rsp (nums)
%rsi = %rsp (nums)

从传入的字符串中读取6个int，写入栈顶24个字节的空间

%r14 = %rsp (nums)

%r12d = 0   (这个是循环计数器，总共执行循环6次)
while (1)
{
    %rbq = %r13
    %rax = *(%r13) - 1

    if (%rax < 0 || %rax > 5)
    {
        exblode_bomb()
    }

    %r12d += 1
    if (%r12d == 6) break
    
    %rbx = %r12d (循环计数器，目前来看大概是个ij二重循环结构)
    while (%rbx <= 5)
    {
        %rax = %rbx
        %rax = nums[%rbx]
    
        if (%rax == *(%rbp))
        {
            exblode_bomb()
        }
    
        %rbx += 1
    }
        
    (%r13)++;
}
上述代码大致完成了数组6个数字都不重复的判断
并且每个数字都位于区间[1,6]，所以这6个数字是1-6的一个排列

%rsi = nums[6] (没有这个数组元素，这相当于循环的哨兵)
%rax = %r14
%rcx = 7
while (%rax != %rsi)
{
    *(%rax) = 7 - *(%rax)
    (%rax)++;
}
对nums的每个元素nums[i]，赋值为(7 - nums[i])
此时nums的数据仍为1-6的一个排列

%rsi = 0
这里代码很乱，其实是把前面获得的6个数字作为一个6元素链表的索引
举个例子，假如第一个数字是5,那么程序获得指向链表第五个节点的指针，
并把它存储到指针数组的第一个位置

%rbx = ptrs[0]
%rax = &(ptrs[1])
%rsi = &(ptrs[6]) （这应该是个哨兵）
%rcx = ptrs[0]
while (1)
{
    %rdx = *(%rax) (链表节点的指针)
    (%rcx)->next = %rdx
    
    %rax++
    if (%rax != %rsi) break;
    
    %rcx = %rdx
}
这里相当于把nodes数组的第一个node作为头节点（关键）
然后按照我们传入数字的顺序编排nodes数组修改节点的next，成一个链表

把最后一个节点的next赋值为NULL
%rbp = 5 (计数器，循环执行5次)
while (%rbq > 0)
{
    %rax = (%rbx)->next
    %rax = %rax->val
    if ((%rbx)->val < %rax)
    {
        explode_bomb();
    }
    (%rbp)--
}


1 2 3 4 5 6
6 5 4


传参寄存器：
%rdi 传入的字符串
%rsi 指针数组哨兵
%rdx 第二个指针的值
%rcx 第一个指针
%r8
%r9


其他寄存器：
%rax 第二个指针
%rbx 第一个指针
%r12 1
%r13 栈顶
%r14 栈顶
%rbp 栈顶

栈空间：80字节
栈顶：
int [6]：24字节，每个数字为7减去传入的原数字
8个字节
int *[6]：48个字节，如果原数字不为6,它和后面的指针存储0x6032d0



附加信息：
第一个数字大于等于1小于等于6
6个数字不重复
