                            | #######################################################################
                            | # Test for copying block of size 63;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f46806000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f23f00000000000000 | 	irmovq $63, %rdx		# src and dst have 63 elements
0x014: 30f6e803000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f7e001000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
0x032: 6300                 | 	xorq %rax,%rax		# count = 0;
0x034: c0f2faffffffffffffff | 	iaddq $-6, %rdx
0x03e: 75ab00000000000000   | 	jge Loop6			# if so, goto Loop:
0x047: c0f20500000000000000 | 	iaddq $5, %rdx
0x051: 72db01000000000000   | 	jl Done
0x05a:                      | Loop1:
0x05a: 50a70000000000000000 |     mrmovq (%rdi), %r10	# read val from src...
0x064: 40a60000000000000000 |     rmmovq %r10, (%rsi)	# ...and store it to dst
0x06e: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x070: 718300000000000000   | 	jle Npos		# if so, goto Npos:
0x079: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x083:                      | Npos:
0x083: c0f70800000000000000 |     iaddq $8, %rdi
0x08d: c0f60800000000000000 |     iaddq $8, %rsi
0x097:                      | Check1:
0x097: c0f2ffffffffffffffff |     iaddq $-1, %rdx
0x0a1: 755a00000000000000   |     jge Loop1
0x0aa: 90                   |     ret
0x0ab:                      | Loop6:
0x0ab: 50a70000000000000000 |     mrmovq (%rdi), %r10	# read val from src...
                            |     
0x0b5: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x0b7: 71ca00000000000000   | 	jle Npos1		# if so, goto Npos:
0x0c0: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x0ca:                      | Npos1:
0x0ca: 40a60000000000000000 |     rmmovq %r10, (%rsi)	# ...and store it to dst
0x0d4: 50a70800000000000000 | 	mrmovq 8(%rdi), %r10	# read val from src...
                            |     
0x0de: 62aa                 |     andq %r10, %r10
0x0e0: 71f300000000000000   |     jle Npos2		# if so, goto Npos:
0x0e9: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x0f3:                      | Npos2:
0x0f3: 40a60800000000000000 |     rmmovq %r10, 8(%rsi)	# ...and store it to dst
0x0fd: 50a71000000000000000 |     mrmovq 16(%rdi), %r10	# read val from src...
                            |     
0x107: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x109: 711c01000000000000   | 	jle Npos3		# if so, goto Npos:
0x112: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x11c:                      | Npos3:
0x11c: 40a61000000000000000 |     rmmovq %r10, 16(%rsi)	# ...and store it to dst
0x126: 50a71800000000000000 |     mrmovq 24(%rdi), %r10	# read val from src...
                            |     
0x130: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x132: 714501000000000000   | 	jle Npos4		# if so, goto Npos:
0x13b: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x145:                      | Npos4:
0x145: 40a61800000000000000 |     rmmovq %r10, 24(%rsi)	# ...and store it to dst
0x14f: 50a72000000000000000 |     mrmovq 32(%rdi), %r10	# read val from src...
                            |     
0x159: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x15b: 716e01000000000000   | 	jle Npos5		# if so, goto Npos:
0x164: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x16e:                      | Npos5:
0x16e: 40a62000000000000000 |     rmmovq %r10, 32(%rsi)	# ...and store it to dst
0x178: 50a72800000000000000 |     mrmovq 40(%rdi), %r10	# read val from src...
                            |     
0x182: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x184: 719701000000000000   | 	jle Npos6		# if so, goto Npos:
0x18d: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x197:                      | Npos6:
0x197: 40a62800000000000000 |     rmmovq %r10, 40(%rsi)	# ...and store it to dst
0x1a1: c0f73000000000000000 | 	iaddq $48, %rdi		# src++
0x1ab: c0f63000000000000000 | 	iaddq $48, %rsi		# dst++
0x1b5:                      | Check6:
0x1b5: c0f2faffffffffffffff |     iaddq $-6, %rdx
0x1bf: 75ab00000000000000   | 	jge Loop6			# if so, goto Loop:
0x1c8: c0f20500000000000000 | 	iaddq $5, %rdx
0x1d2: 755a00000000000000   | 	jge Loop1
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x1db:                      | Done:
0x1db: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x1dc:                      | End:
                            | #/* $end ncopy-ys */
0x1dc:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x1e0:                      | 	.align 8
0x1e0:                      | src:
0x1e0: ffffffffffffffff     | 	.quad -1
0x1e8: feffffffffffffff     | 	.quad -2
0x1f0: fdffffffffffffff     | 	.quad -3
0x1f8: fcffffffffffffff     | 	.quad -4
0x200: fbffffffffffffff     | 	.quad -5
0x208: 0600000000000000     | 	.quad 6
0x210: 0700000000000000     | 	.quad 7
0x218: 0800000000000000     | 	.quad 8
0x220: f7ffffffffffffff     | 	.quad -9
0x228: 0a00000000000000     | 	.quad 10
0x230: f5ffffffffffffff     | 	.quad -11
0x238: 0c00000000000000     | 	.quad 12
0x240: 0d00000000000000     | 	.quad 13
0x248: f2ffffffffffffff     | 	.quad -14
0x250: 0f00000000000000     | 	.quad 15
0x258: 1000000000000000     | 	.quad 16
0x260: 1100000000000000     | 	.quad 17
0x268: 1200000000000000     | 	.quad 18
0x270: edffffffffffffff     | 	.quad -19
0x278: 1400000000000000     | 	.quad 20
0x280: 1500000000000000     | 	.quad 21
0x288: 1600000000000000     | 	.quad 22
0x290: 1700000000000000     | 	.quad 23
0x298: 1800000000000000     | 	.quad 24
0x2a0: 1900000000000000     | 	.quad 25
0x2a8: e6ffffffffffffff     | 	.quad -26
0x2b0: e5ffffffffffffff     | 	.quad -27
0x2b8: e4ffffffffffffff     | 	.quad -28
0x2c0: e3ffffffffffffff     | 	.quad -29
0x2c8: 1e00000000000000     | 	.quad 30
0x2d0: 1f00000000000000     | 	.quad 31
0x2d8: 2000000000000000     | 	.quad 32
0x2e0: 2100000000000000     | 	.quad 33
0x2e8: 2200000000000000     | 	.quad 34
0x2f0: 2300000000000000     | 	.quad 35
0x2f8: 2400000000000000     | 	.quad 36
0x300: dbffffffffffffff     | 	.quad -37
0x308: daffffffffffffff     | 	.quad -38
0x310: d9ffffffffffffff     | 	.quad -39
0x318: d8ffffffffffffff     | 	.quad -40
0x320: d7ffffffffffffff     | 	.quad -41
0x328: d6ffffffffffffff     | 	.quad -42
0x330: 2b00000000000000     | 	.quad 43
0x338: 2c00000000000000     | 	.quad 44
0x340: 2d00000000000000     | 	.quad 45
0x348: 2e00000000000000     | 	.quad 46
0x350: 2f00000000000000     | 	.quad 47
0x358: 3000000000000000     | 	.quad 48
0x360: cfffffffffffffff     | 	.quad -49
0x368: 3200000000000000     | 	.quad 50
0x370: 3300000000000000     | 	.quad 51
0x378: ccffffffffffffff     | 	.quad -52
0x380: cbffffffffffffff     | 	.quad -53
0x388: caffffffffffffff     | 	.quad -54
0x390: c9ffffffffffffff     | 	.quad -55
0x398: c8ffffffffffffff     | 	.quad -56
0x3a0: c7ffffffffffffff     | 	.quad -57
0x3a8: c6ffffffffffffff     | 	.quad -58
0x3b0: c5ffffffffffffff     | 	.quad -59
0x3b8: c4ffffffffffffff     | 	.quad -60
0x3c0: c3ffffffffffffff     | 	.quad -61
0x3c8: c2ffffffffffffff     | 	.quad -62
0x3d0: c1ffffffffffffff     | 	.quad -63
0x3d8: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x3e0:                      | 	.align 16
0x3e0:                      | Predest:
0x3e0: fadebc0000000000     | 	.quad 0xbcdefa
0x3e8:                      | dest:
0x3e8: abefcd0000000000     | 	.quad 0xcdefab
0x3f0: abefcd0000000000     | 	.quad 0xcdefab
0x3f8: abefcd0000000000     | 	.quad 0xcdefab
0x400: abefcd0000000000     | 	.quad 0xcdefab
0x408: abefcd0000000000     | 	.quad 0xcdefab
0x410: abefcd0000000000     | 	.quad 0xcdefab
0x418: abefcd0000000000     | 	.quad 0xcdefab
0x420: abefcd0000000000     | 	.quad 0xcdefab
0x428: abefcd0000000000     | 	.quad 0xcdefab
0x430: abefcd0000000000     | 	.quad 0xcdefab
0x438: abefcd0000000000     | 	.quad 0xcdefab
0x440: abefcd0000000000     | 	.quad 0xcdefab
0x448: abefcd0000000000     | 	.quad 0xcdefab
0x450: abefcd0000000000     | 	.quad 0xcdefab
0x458: abefcd0000000000     | 	.quad 0xcdefab
0x460: abefcd0000000000     | 	.quad 0xcdefab
0x468: abefcd0000000000     | 	.quad 0xcdefab
0x470: abefcd0000000000     | 	.quad 0xcdefab
0x478: abefcd0000000000     | 	.quad 0xcdefab
0x480: abefcd0000000000     | 	.quad 0xcdefab
0x488: abefcd0000000000     | 	.quad 0xcdefab
0x490: abefcd0000000000     | 	.quad 0xcdefab
0x498: abefcd0000000000     | 	.quad 0xcdefab
0x4a0: abefcd0000000000     | 	.quad 0xcdefab
0x4a8: abefcd0000000000     | 	.quad 0xcdefab
0x4b0: abefcd0000000000     | 	.quad 0xcdefab
0x4b8: abefcd0000000000     | 	.quad 0xcdefab
0x4c0: abefcd0000000000     | 	.quad 0xcdefab
0x4c8: abefcd0000000000     | 	.quad 0xcdefab
0x4d0: abefcd0000000000     | 	.quad 0xcdefab
0x4d8: abefcd0000000000     | 	.quad 0xcdefab
0x4e0: abefcd0000000000     | 	.quad 0xcdefab
0x4e8: abefcd0000000000     | 	.quad 0xcdefab
0x4f0: abefcd0000000000     | 	.quad 0xcdefab
0x4f8: abefcd0000000000     | 	.quad 0xcdefab
0x500: abefcd0000000000     | 	.quad 0xcdefab
0x508: abefcd0000000000     | 	.quad 0xcdefab
0x510: abefcd0000000000     | 	.quad 0xcdefab
0x518: abefcd0000000000     | 	.quad 0xcdefab
0x520: abefcd0000000000     | 	.quad 0xcdefab
0x528: abefcd0000000000     | 	.quad 0xcdefab
0x530: abefcd0000000000     | 	.quad 0xcdefab
0x538: abefcd0000000000     | 	.quad 0xcdefab
0x540: abefcd0000000000     | 	.quad 0xcdefab
0x548: abefcd0000000000     | 	.quad 0xcdefab
0x550: abefcd0000000000     | 	.quad 0xcdefab
0x558: abefcd0000000000     | 	.quad 0xcdefab
0x560: abefcd0000000000     | 	.quad 0xcdefab
0x568: abefcd0000000000     | 	.quad 0xcdefab
0x570: abefcd0000000000     | 	.quad 0xcdefab
0x578: abefcd0000000000     | 	.quad 0xcdefab
0x580: abefcd0000000000     | 	.quad 0xcdefab
0x588: abefcd0000000000     | 	.quad 0xcdefab
0x590: abefcd0000000000     | 	.quad 0xcdefab
0x598: abefcd0000000000     | 	.quad 0xcdefab
0x5a0: abefcd0000000000     | 	.quad 0xcdefab
0x5a8: abefcd0000000000     | 	.quad 0xcdefab
0x5b0: abefcd0000000000     | 	.quad 0xcdefab
0x5b8: abefcd0000000000     | 	.quad 0xcdefab
0x5c0: abefcd0000000000     | 	.quad 0xcdefab
0x5c8: abefcd0000000000     | 	.quad 0xcdefab
0x5d0: abefcd0000000000     | 	.quad 0xcdefab
0x5d8: abefcd0000000000     | 	.quad 0xcdefab
0x5e0:                      | Postdest:
0x5e0: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x5e8:                      | .align 8
                            | # Run time stack
0x5e8: 0000000000000000     | 	.quad 0
0x5f0: 0000000000000000     | 	.quad 0
0x5f8: 0000000000000000     | 	.quad 0
0x600: 0000000000000000     | 	.quad 0
0x608: 0000000000000000     | 	.quad 0
0x610: 0000000000000000     | 	.quad 0
0x618: 0000000000000000     | 	.quad 0
0x620: 0000000000000000     | 	.quad 0
0x628: 0000000000000000     | 	.quad 0
0x630: 0000000000000000     | 	.quad 0
0x638: 0000000000000000     | 	.quad 0
0x640: 0000000000000000     | 	.quad 0
0x648: 0000000000000000     | 	.quad 0
0x650: 0000000000000000     | 	.quad 0
0x658: 0000000000000000     | 	.quad 0
0x660: 0000000000000000     | 	.quad 0
                            | 
0x668:                      | Stack:
